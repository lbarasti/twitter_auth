{"repository_name":"twitter_auth","body":"[![GitHub release](https://img.shields.io/github/release/lbarasti/twitter_auth.svg)](https://github.com/lbarasti/twitter_auth/releases)\n![Build Status](https://github.com/lbarasti/twitter_auth/workflows/build/badge.svg)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://lbarasti.github.io/twitter_auth)\n\n# twitter_auth\n\nA library to add the **Sign in with Twitter** functionality to your Crystal web app, in a few lines of code.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  twitter_auth:\n    github: lbarasti/twitter_auth\n```\n\n2. Run `shards install`\n\n## Usage\n\n#### Initializing a Twitter authorization client\nTwitter apps are assigned a `consumer key` and a `consumer secret`. These are used to sign any request to the Twitter API.\nHere is how you create a Twitter authorization client:\n```crystal\nrequire \"twitter_auth\"\n\nauth_client = TwitterAPI.new(consumer_key, consumer_secret, callback_url)\n```\n\n#### Requesting an OAuth Request Token\nWhen a user requests to sign in with Twitter, the first step for your app is to ask Twitter for an OAuth Requests Token.\n```crystal\nrequest_token = auth_client.get_token\n```\nYour app will then redirect the user to a Twitter-owned login screen - `TwitterAPI.authenticate_url(request_token)` - where they can authorize your app to issue requests on their behalf.\n\n#### Upgrading to an OAuth Access Token\nAfter the sign-in, the user is redirected to your app via a whitelisted callback URL. With the parameters included in the request, your app can now upgrade the request token to an access one.\n```crystal\naccess_token = auth_client.upgrade_token(request_token, verifier)\n```\n\n#### Verifying a user's identity\nNow that you have an OAuth Access Token, you can verify the identity of the user who signed in.\n```crystal\nauth_client.verify(access_token)\n```\nWhen successful, this returns a `String` in JSON format, containing information about the user, e.g. user id, Twitter handle and description.\n\n#### Invalidating an OAuth Access Token\nBy design, a Twitter user's access token never expires. Nonetheless, it's likely that your app will need to invalidate the access token at some point.\n```crystal\nauth_client.invalidate_token(access_token)\n```\nThis will require the user to authorize your app again, next time they try to sign in with Twitter.\n\n--------\nFor more info on the `twitter_auth` API you can browse the [API docs](https://lbarasti.com/twitter_auth/docs/) pages.\n\n## 3-legged OAuth flow\nWhen a user clicks on the button\n![Sign in with Twitter](media/sign-in-with-twitter.png \"Sign in with Twitter\")\nyour application will initiate a [3-legged OAuth flow](https://developer.twitter.com/en/docs/basics/authentication/oauth-1-0a/obtaining-user-access-tokens).\n\nFor a minimal implementation, you just need to define the following endpoints.\n\n```crystal\nget \"/authenticate\" do |ctx|\n  request_token = auth_client.get_token.oauth_token\n  <your-code-here> # store the request token for later verification in the /callback-url step\n  ctx.redirect TwitterAPI.authenticate_url(request_token)\nend\n\nget \"/callback-url\" do |ctx|\n  token = ctx.params.query[\"oauth_token\"]\n  <your-code-here> # verify that the token matches the request token stored in the step above\n  verifier = ctx.params.query[\"oauth_verifier\"]\n  token, secret = auth_client.upgrade_token(token, verifier)\n  <your-code-here> # store the access token and secret - to be used for future authenticated requests to the TwitterAPI\n  ctx.redirect \"/#some-token-here\"\nend\n```\nRemember to configure your [Twitter app](https://developer.twitter.com/en/apps/) to whitelist the callback URL.\n\n#### Demo\n\nYou can play with a demo of the example app on [heroku](https://this-is-trimmer.herokuapp.com/).\n\n## FAQ\n\n#### Why do I want this?\nYour users will authenticate to your app via Twitter, so that your app does not have to deal with user management and forgotten passwords.\n#### Is it authentication or authorization?\nThe OAuth flow lets the user **authorize** your app to read information about them, so that you can **authenticate** the user into your app.\n#### Can I use my own HTTP client to issue calls to the Twitter API?\nYes, you can. Just subclass `TwitterAPI` and override the [exec](https://github.com/lbarasti/twitter_auth/blob/v1.0.0/src/twitter_auth/twitter_api.cr#L101) method.\n\n## Development\n\n#### Running the tests\n```\ncrystal spec\n```\n\n#### Running the example app\nBefore running the example app, make sure the following environment variables are defined consistently with your Twitter app settings - you can define a new Twitter app [here](https://developer.twitter.com/en/apps/):\n```\nTWITTER_CONSUMER_KEY\nTWITTER_CONSUMER_SECRET\nTWITTER_CALLBACK_URL\n```\nMind that, in order to get the app to work locally, you'll need to have `localhost:8090/your-callback-path` in the app's _callback URL_ list.\n\nNext, run the following.\n```\n$ cd examples/kemal_integration\n$ shards install\n$ crystal src/server.cr\n```\nNow open your browser to `http://0.0.0.0:8090` and follow your instinct :rocket:\n\n## Contributing\n\n1. Fork it (<https://github.com/lbarasti/twitter_auth/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [lbarasti](https://github.com/lbarasti) - creator and maintainer\n","program":{"html_id":"twitter_auth/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"twitter_auth","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"twitter_auth/TwitterAPI","path":"TwitterAPI.html","kind":"class","full_name":"TwitterAPI","name":"TwitterAPI","abstract":false,"superclass":{"html_id":"twitter_auth/SimpleOAuth/Consumer","kind":"class","full_name":"SimpleOAuth::Consumer","name":"Consumer"},"ancestors":[{"html_id":"twitter_auth/SimpleOAuth/Consumer","kind":"class","full_name":"SimpleOAuth::Consumer","name":"Consumer"},{"html_id":"twitter_auth/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"twitter_auth/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/twitter_auth.cr","line_number":4,"url":null}],"repository_name":"twitter_auth","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"invalidate_token(token:TokenPair)-instance-method","html_id":"invalidate_token(token:TokenPair)-instance-method","name":"invalidate_token","doc":"Revokes an issued OAuth Access Token by presenting its client credentials.\n\nOnce an OAuth Access Token has been invalidated, new creation attempts will yield a different\nOAuth Access Token and usage of the invalidated token will no longer be allowed.\n\nSee the [Twitter API reference](https://developer.twitter.com/en/docs/basics/authentication/api-reference/invalidate_access_token)","summary":"<p>Revokes an issued OAuth Access Token by presenting its client credentials.</p>","abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"TokenPair"}],"args_string":"(token : TokenPair)","args_html":"(token : TokenPair)","location":{"filename":"src/twitter_auth.cr","line_number":31,"url":null},"def":{"name":"invalidate_token","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"TokenPair"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"user_auth = SimpleOAuth::Signature.new(@consumer_secret, token.oauth_token_secret)\nauth_params = {\"oauth_token\" => token.oauth_token}\nexec_signed(:post, @@invalidate_token_url, auth_params, @@empty_params, auth = user_auth)\n"}},{"id":"upgrade_token(token:String,verifier:String):TokenPair-instance-method","html_id":"upgrade_token(token:String,verifier:String):TokenPair-instance-method","name":"upgrade_token","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"},{"name":"verifier","doc":null,"default_value":"","external_name":"verifier","restriction":"String"}],"args_string":"(token : String, verifier : String) : TokenPair","args_html":"(token : String, verifier : String) : TokenPair","location":{"filename":"src/twitter_auth.cr","line_number":41,"url":null},"def":{"name":"upgrade_token","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"String"},{"name":"verifier","doc":null,"default_value":"","external_name":"verifier","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TokenPair","visibility":"Public","body":"upgrade_token(TokenPair.new(token, \"\"), verifier)"}},{"id":"verify(token:TokenPair)-instance-method","html_id":"verify(token:TokenPair)-instance-method","name":"verify","doc":"Returns a representation of the requesting user if authentication was successful;\nraises an exception if not. Use this method to test if supplied user credentials are valid.\n\nSee the [Twitter documentation](https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials)","summary":"<p>Returns a representation of the requesting user if authentication was successful; raises an exception if not.</p>","abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"TokenPair"}],"args_string":"(token : TokenPair)","args_html":"(token : TokenPair)","location":{"filename":"src/twitter_auth.cr","line_number":15,"url":null},"def":{"name":"verify","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"TokenPair"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"user_auth = SimpleOAuth::Signature.new(@consumer_secret, token.oauth_token_secret)\nauth_params = {\"oauth_token\" => token.oauth_token}\nexec_signed(:get, @@verify_credentials_url, auth_params, @@empty_params, auth = user_auth)\n"}}],"macros":[],"types":[]}]}}